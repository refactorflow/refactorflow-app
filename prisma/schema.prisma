// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String      @id @default(cuid())
    name                String?
    email               String?     @unique
    emailVerified       DateTime?
    image               String?
    bio                 String?     @db.Text
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    role                Role        @default(USER)
    accounts            Account[]
    sessions            Session[]
    solutions           Solution[]
    comments            Comment[]
    ratings             Rating[]
    completedChallenges Challenge[] @relation("CompletedChallenges")
    startedChallenges   Challenge[] @relation("StartedChallenges")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Challenge {
    id             String       @id @default(cuid())
    title          String
    slug           String       @unique
    description    String       @db.Text
    difficulty     Difficulty
    categoryMain   CategoryMain
    subCategories  String[]
    starterCodeUrl String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    authorId       String
    solutionCount  Int          @default(0)
    averageRating  Float        @default(0)
    solutions      Solution[]
    ratings        Rating[]
    tags           Tag[]        @relation("ChallengeTags")
    completedBy    User[]       @relation("CompletedChallenges")
    startedBy      User[]       @relation("StartedChallenges")

    @@index([difficulty, categoryMain])
}

model Solution {
    id                    String    @id @default(cuid())
    challengeId           String
    userId                String
    title                 String
    repositoryUrl         String
    description           String    @db.Text
    implementationDetails String?   @db.Text
    upvotes               Int       @default(0)
    downvotes             Int       @default(0)
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt
    challenge             Challenge @relation(fields: [challengeId], references: [id])
    user                  User      @relation(fields: [userId], references: [id])
    comments              Comment[]

    @@index([challengeId])
    @@index([userId])
}

model Comment {
    id              String    @id @default(cuid())
    solutionId      String
    userId          String
    content         String    @db.Text
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    parentCommentId String?
    reactions       Json // Stored as JSON array of {type: string, count: number, userIds: string[]}
    solution        Solution  @relation(fields: [solutionId], references: [id], onDelete: Cascade)
    user            User      @relation(fields: [userId], references: [id])
    parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
    replies         Comment[] @relation("CommentReplies")

    @@index([solutionId])
    @@index([userId])
}

model Rating {
    id          String    @id @default(cuid())
    challengeId String
    userId      String
    score       Int       @db.SmallInt
    review      String?   @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    challenge   Challenge @relation(fields: [challengeId], references: [id])
    user        User      @relation(fields: [userId], references: [id])

    @@unique([challengeId, userId])
    @@index([challengeId])
}

model Tag {
    id         String      @id @default(cuid())
    name       String      @unique
    category   TagCategory
    challenges Challenge[] @relation("ChallengeTags")

    @@index([category])
}

enum Difficulty {
    BEGINNER
    INTERMEDIATE
    ADVANCED
    EXPERT
}

enum CategoryMain {
    FRONTEND
    BACKEND
    FULLSTACK
}

enum TagCategory {
    LANGUAGE
    FRAMEWORK
    TOOL
    CONCEPT
}

enum Role {
    ADMIN
    USER
}
